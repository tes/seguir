[  {    "type": "get",    "url": "/feed/:user",    "title": "Get a feed for a user",    "name": "GetFeed",    "group": "ApiFeeds",    "version": "1.0.0",    "description": "<p>Retrieves a set of feed items for a specific user</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Feeds",    "groupDescription": "<p>This is a collection of methods that allow you to retrieve the news feed for a user.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"feed\": [\n    {\n      \"like\": \"9b384f5a-e1b4-49e7-b80b-8ba7cf882b95\",\n      \"item\": \"http%3A%2F%2Fgithub.com\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"since\": \"2015-06-18T11:13:45.333Z\",\n      \"_item\": \"9b384f5a-e1b4-49e7-b80b-8ba7cf882b95\",\n      \"type\": \"like\",\n      \"timeuuid\": \"15c28a74-15ab-11e5-8fdd-37533e1b3be9\",\n      \"date\": \"2015-06-18T11:13:45.333Z\",\n      \"fromNow\": \"a few seconds ago\",\n      \"isprivate\": false,\n      \"ispersonal\": false,\n      \"fromFollower\": true,\n      \"isLike\": true,\n      \"isPost\": false,\n      \"isFollow\": false,\n      \"isFriend\": false,\n      \"isUsersItem\": false\n    },\n    {\n      \"post\": \"051fb278-0d5c-4305-aa04-9f4cebe1fe41\",\n      \"content\": \"Hello, this is a private post\",\n      \"content_type\": \"text/html\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"posted\": \"2015-06-18T11:13:44.200Z\",\n      \"isprivate\": true,\n      \"ispersonal\": false,\n      \"_item\": \"051fb278-0d5c-4305-aa04-9f4cebe1fe41\",\n      \"type\": \"post\",\n      \"timeuuid\": \"1515a89a-15ab-11e5-9de7-99692db8a24b\",\n      \"date\": \"2015-06-18T11:13:44.200Z\",\n      \"fromNow\": \"a few seconds ago\",\n      \"fromFollower\": true,\n      \"isLike\": false,\n      \"isPost\": true,\n      \"isFollow\": false,\n      \"isFriend\": false,\n      \"isUsersItem\": false\n    },\n    {\n      \"post\": \"107a99d8-6dde-4d47-acd4-331799fb2a72\",\n      \"content\": \"Hello, this is a post\",\n      \"content_type\": \"text/html\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"posted\": \"2015-06-18T11:13:44.122Z\",\n      \"isprivate\": false,\n      \"ispersonal\": false,\n      \"_item\": \"107a99d8-6dde-4d47-acd4-331799fb2a72\",\n      \"type\": \"post\",\n      \"timeuuid\": \"1509c1b6-15ab-11e5-8ad3-0e070a62a9bc\",\n      \"date\": \"2015-06-18T11:13:44.122Z\",\n      \"fromNow\": \"a few seconds ago\",\n      \"fromFollower\": true,\n      \"isLike\": false,\n      \"isPost\": true,\n      \"isFollow\": false,\n      \"isFriend\": false,\n      \"isUsersItem\": false\n    },\n    {\n      \"follow\": \"9dcf7228-35c9-4dc3-99e5-f2cd7d063175\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"user_follower\": {\n        \"user\": \"6fdfaea4-e03e-469f-bfc6-bf76ce6f2850\",\n        \"username\": \"ted\",\n        \"altid\": \"3\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"since\": \"2015-06-18T11:13:43.813Z\",\n      \"isprivate\": false,\n      \"ispersonal\": false,\n      \"_item\": \"9dcf7228-35c9-4dc3-99e5-f2cd7d063175\",\n      \"type\": \"follow\",\n      \"timeuuid\": \"14da9b5c-15ab-11e5-ac1a-5b83b258c8d1\",\n      \"date\": \"2015-06-18T11:13:43.813Z\",\n      \"fromNow\": \"a few seconds ago\",\n      \"fromFollower\": true,\n      \"isLike\": false,\n      \"isPost\": false,\n      \"isFollow\": true,\n      \"isFriend\": false,\n      \"isUsersItem\": false\n    },\n    {\n      \"follow\": \"3e86dcb6-a3f8-429f-914b-7eaa7d61fb89\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"user_follower\": {\n        \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n        \"username\": \"phteven\",\n        \"altid\": \"2\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"since\": \"2015-06-18T11:13:43.768Z\",\n      \"isprivate\": false,\n      \"ispersonal\": false,\n      \"_item\": \"3e86dcb6-a3f8-429f-914b-7eaa7d61fb89\",\n      \"type\": \"follow\",\n      \"timeuuid\": \"14d3bd89-15ab-11e5-99da-187dd81992ad\",\n      \"date\": \"2015-06-18T11:13:43.768Z\",\n      \"fromNow\": \"a few seconds ago\",\n      \"fromFollower\": true,\n      \"isLike\": false,\n      \"isPost\": false,\n      \"isFollow\": true,\n      \"isFriend\": false,\n      \"isUsersItem\": false\n    },\n    {\n      \"friend\": \"85bdb2ce-0a0a-46c2-bc4c-00d7d3ecb5a0\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"user_friend\": {\n        \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n        \"username\": \"phteven\",\n        \"altid\": \"2\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"since\": \"2015-06-18T11:13:43.437Z\",\n      \"_item\": \"85bdb2ce-0a0a-46c2-bc4c-00d7d3ecb5a0\",\n      \"type\": \"friend\",\n      \"timeuuid\": \"14a13bd1-15ab-11e5-9157-dd5e982cf116\",\n      \"date\": \"2015-06-18T11:13:43.437Z\",\n      \"fromNow\": \"a few seconds ago\",\n      \"isprivate\": true,\n      \"ispersonal\": false,\n      \"fromFollower\": true,\n      \"isLike\": false,\n      \"isPost\": false,\n      \"isFollow\": false,\n      \"isFriend\": true,\n      \"isUsersItem\": false\n    }\n  ],\n  \"more\": null\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/feed/:user/direct",    "title": "Get a direct feed for a user",    "name": "GetFeedDirect",    "group": "ApiFeeds",    "version": "1.0.0",    "description": "<p>Retrieves a set of feed items for a specific user that are directly posted to their feed, so not including items that come via follows or mentions.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Feeds",    "groupDescription": "<p>This is a collection of methods that allow you to retrieve the news feed for a user.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n[\n  {\n    \"friend\": \"ff8f9c08-b9e1-4544-bd1c-a30b105d856f\",\n    \"user\": {\n      \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n      \"username\": \"phteven\",\n      \"altid\": \"2\",\n      \"userdata\": {\n        \"avatar\": \"test.jpg\"\n      }\n    },\n    \"user_friend\": {\n      \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n      \"username\": \"cliftonc\",\n      \"altid\": \"1\",\n      \"userdata\": {\n        \"avatar\": \"test.jpg\"\n      }\n    },\n    \"since\": \"2015-06-18T11:13:43.437Z\",\n    \"_item\": \"ff8f9c08-b9e1-4544-bd1c-a30b105d856f\",\n    \"type\": \"friend\",\n    \"timeuuid\": \"14a13bd4-15ab-11e5-b123-1b51513753fc\",\n    \"date\": \"2015-06-18T11:13:43.437Z\",\n    \"fromNow\": \"a few seconds ago\",\n    \"isprivate\": true,\n    \"ispersonal\": false,\n    \"fromFollower\": true,\n    \"isLike\": false,\n    \"isPost\": false,\n    \"isFollow\": false,\n    \"isFriend\": true,\n    \"isUsersItem\": false\n  }\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/follow",    "title": "Add a follower to a user",    "name": "AddFollower",    "group": "ApiFollowers",    "version": "1.0.0",    "description": "<p>Adds a new friend to a user account.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid representation of the user who will be followed</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_follower",            "description": "<p>the guid of the user who will be the follower</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>is the follow private, e.g. only for friends</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>is the follow personal, e.g. only for you</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "backfill",            "description": "<p>amount of time to backfill posts from the user followed - e.g. 1d</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Followers",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve follows.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"follow\": \"3e86dcb6-a3f8-429f-914b-7eaa7d61fb89\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"user_follower\": {\n    \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n    \"username\": \"phteven\",\n    \"altid\": \"2\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"isprivate\": false,\n  \"ispersonal\": false,\n  \"since\": \"2015-06-18T11:13:43.768Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a username</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a username.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a follow guid.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/followers/:follow",    "title": "Get follow details",    "name": "GetFollower",    "group": "ApiFollowers",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific follow</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "follow",            "description": "<p>the guid of a specific follow</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Followers",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve follows.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"follow\": \"3e86dcb6-a3f8-429f-914b-7eaa7d61fb89\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"user_follower\": {\n    \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n    \"username\": \"phteven\",\n    \"altid\": \"2\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"since\": \"2015-06-18T11:13:43.768Z\",\n  \"isprivate\": false,\n  \"ispersonal\": false\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/user/:user/followers",    "title": "Get followers for a user",    "name": "GetFollowers",    "group": "ApiFollowers",    "version": "1.0.0",    "description": "<p>Retrieves a set of feed items for a specific user</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "username",            "description": "<p>the username of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Followers",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve follows.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n[\n  {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"user_follower\": {\n      \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n      \"username\": \"phteven\",\n      \"altid\": \"2\",\n      \"userdata\": {\n        \"avatar\": \"test.jpg\"\n      }\n    },\n    \"since\": \"2015-06-18T11:13:43.768Z\",\n    \"isprivate\": false,\n    \"ispersonal\": false\n  },\n  {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"user_follower\": {\n      \"user\": \"6fdfaea4-e03e-469f-bfc6-bf76ce6f2850\",\n      \"username\": \"ted\",\n      \"altid\": \"3\",\n      \"userdata\": {\n        \"avatar\": \"test.jpg\"\n      }\n    },\n    \"since\": \"2015-06-18T11:13:43.813Z\",\n    \"isprivate\": false,\n    \"ispersonal\": false\n  }\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/user/:user/follower/:user_follower",    "title": "Stop following a user.",    "name": "RemoveFollower",    "group": "ApiFollowers",    "version": "1.0.0",    "description": "<p>Removes a follow</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the user guid who is currently being followed</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user_follower",            "description": "<p>the user who will stop following the first user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Followers",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve follows.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"status\": \"removed\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a guid for the user</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a user guid.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a follow guid.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/friend-request/accept",    "title": "Accept a friend request",    "name": "AcceptFriendRequest",    "group": "ApiFriendRequests",    "version": "1.0.0",    "description": "<p>Accepts a friend request.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "friend_request",            "description": "<p>the guid of the user to become friends with</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Friend Requests",    "groupDescription": "<p>This is a collection of methods that allow you to use the friend request workflow (instead of creating friends automatically).</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"friend\": \"85bdb2ce-0a0a-46c2-bc4c-00d7d3ecb5a0\",\n  \"reciprocal\": \"ff8f9c08-b9e1-4544-bd1c-a30b105d856f\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"user_friend\": {\n    \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n    \"username\": \"phteven\",\n    \"altid\": \"2\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"since\": \"2015-06-18T11:13:43.437Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a guid for the user</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a user guid.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a friend guid.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/friend-request",    "title": "Submit a new friend request",    "name": "AddFriendRequest",    "group": "ApiFriendRequests",    "version": "1.0.0",    "description": "<p>Adds a new friend request.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user_friend",            "description": "<p>the guid of the user to become friends with</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "message",            "description": "<p>the message to leave</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Friend Requests",    "groupDescription": "<p>This is a collection of methods that allow you to use the friend request workflow (instead of creating friends automatically).</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"friend_request\": \"ef74e037-ee69-4c1c-bbf4-1538af08c208\",\n  \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n  \"user_friend\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n  \"message\": \"Please be my friend\",\n  \"since\": \"2015-06-18T11:13:43.352Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a guid for the user</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a user guid.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a friend guid.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/friend-request/active",    "title": "Get active friend requests",    "name": "GetFriendRequests",    "group": "ApiFriendRequests",    "version": "1.0.0",    "description": "<p>Retrieves active friend Requests for logged in user (inbound and outbound)</p> ",    "filename": "./server/index.js",    "groupTitle": "Friend Requests",    "groupDescription": "<p>This is a collection of methods that allow you to use the friend request workflow (instead of creating friends automatically).</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"incoming\": [],\n  \"outgoing\": [\n    {\n      \"friend_request\": \"ef74e037-ee69-4c1c-bbf4-1538af08c208\",\n      \"user\": {\n        \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n        \"username\": \"cliftonc\",\n        \"altid\": \"1\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"user_friend\": {\n        \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n        \"username\": \"phteven\",\n        \"altid\": \"2\",\n        \"userdata\": {\n          \"avatar\": \"test.jpg\"\n        }\n      },\n      \"message\": \"Please be my friend\",\n      \"since\": \"2015-06-18T11:13:43.352Z\"\n    }\n  ]\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/friend/:friend",    "title": "Get friend",    "name": "GetFriend",    "group": "ApiFriends",    "version": "1.0.0",    "description": "<p>Retrieves a specific relationship information</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "ApiFriends",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"friend\": \"85bdb2ce-0a0a-46c2-bc4c-00d7d3ecb5a0\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"user_friend\": {\n    \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n    \"username\": \"phteven\",\n    \"altid\": \"2\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"since\": \"2015-06-18T11:13:43.437Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/user/:user/friends",    "title": "Get friends for a user",    "name": "GetFriends",    "group": "ApiFriends",    "version": "1.0.0",    "description": "<p>Retrieves a set of friends for a specific user</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "ApiFriends",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n[\n  {\n    \"user_friend\": {\n      \"user\": \"195ac17a-d3e1-4d9c-8e57-a4e51320f632\",\n      \"username\": \"phteven\",\n      \"altid\": \"2\",\n      \"userdata\": {\n        \"avatar\": \"test.jpg\"\n      }\n    },\n    \"since\": \"2015-06-18T11:13:43.437Z\"\n  }\n]",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/user/:user/friend/:user_friend",    "title": "Remove a friendship.",    "name": "RemoveFriend",    "group": "ApiFriends",    "version": "1.0.0",    "description": "<p>Removes a friendship (both sides)</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid representation of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user_friend",            "description": "<p>the guid representation of the user they dont want to be friends with</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "ApiFriends",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"status\": \"removed\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a guid for the user</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a user guid.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a friend guid.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/like",    "title": "Add a like by a user",    "name": "AddLike",    "group": "ApiLikes",    "version": "1.0.0",    "description": "<p>Creates a new like of an item</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl --data 'user=405d7e5e-c028-449c-abad-9c11d8569b8f&item=github.com' http://localhost:3000/like",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid representation of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "item",            "description": "<p>a canonical url to the item liked</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Likes",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve likes.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"like\": \"9b384f5a-e1b4-49e7-b80b-8ba7cf882b95\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"item\": \"http%3A%2F%2Fgithub.com\",\n  \"since\": \"2015-06-18T11:13:45.333Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a username</p> "          },          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a username.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide an item.'\n}",          "type": "json"        },        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/user/:user/like/:item",    "title": "Check a specific like",    "name": "CheckLike",    "group": "ApiLikes",    "version": "1.0.0",    "description": "<p>Checks if a user likes a specific item, typically the item is a canonical url.</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl -i http://localhost:3000/like/405d7e5e-c028-449c-abad-9c11d8569b8f/github.com",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The guid of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "item",            "description": "<p>The item to check</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Likes",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve likes.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"like\": \"9b384f5a-e1b4-49e7-b80b-8ba7cf882b95\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"since\": \"2015-06-18T11:13:45.333Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/like/:like",    "title": "Get a specific like",    "name": "GetLike",    "group": "ApiLikes",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific like</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl -i http://localhost:3000/like/405d7e5e-c028-449c-abad-9c11d8569b8f/github.com",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "post",            "description": "<p>The guid of the like</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Likes",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve likes.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"like\": \"9b384f5a-e1b4-49e7-b80b-8ba7cf882b95\",\n  \"item\": \"http%3A%2F%2Fgithub.com\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"since\": \"2015-06-18T11:13:45.333Z\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/user/:user/like/:item",    "title": "Remove a like.",    "name": "RemoveLike",    "group": "ApiLikes",    "version": "1.0.0",    "description": "<p>Removes a like</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The guid of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "item",            "description": "<p>The item to check</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Likes",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve likes.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"status\": \"removed\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/post",    "title": "Add a post by a user",    "name": "AddPost",    "group": "ApiPosts",    "version": "1.0.0",    "description": "<p>Creates a new post, by default all new posts are public, and so can be seen by all users.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "content",            "description": "<p>of the post</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "content_type",            "description": "<p>the type of content in content, use application/json for json data, defaults to text/html</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "timestamp",            "description": "<p>the time that the post occurred</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "private",            "description": "<p>is the post private, e.g. only for friends</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Posts",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve posts.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"post\": \"ec34ca70-0ecd-4e08-bf03-87219ddbcaa3\",\n  \"user\": {\n    \"user\": \"ca280565-422c-4b49-ad48-54514e8a4bb8\",\n    \"username\": \"new_name\",\n    \"altid\": \"new_altid\",\n    \"userdata\": {\n      \"hello\": \"world\"\n    }\n  },\n  \"content\": {\n    \"hello\": \"world\"\n  },\n  \"content_type\": \"application/json\",\n  \"posted\": \"2015-06-18T11:13:45.185Z\",\n  \"isprivate\": false,\n  \"ispersonal\": false\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a guid for the user</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a user guid.'\n}",          "type": "json"        },        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide content for the post.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/post/:post",    "title": "Get a specific post",    "name": "GetPost",    "group": "ApiPosts",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific post</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "post",            "description": "<p>The guid of the post</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Posts",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve posts.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"post\": \"107a99d8-6dde-4d47-acd4-331799fb2a72\",\n  \"content\": \"Hello, this is a post\",\n  \"content_type\": \"text/html\",\n  \"user\": {\n    \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n    \"username\": \"cliftonc\",\n    \"altid\": \"1\",\n    \"userdata\": {\n      \"avatar\": \"test.jpg\"\n    }\n  },\n  \"posted\": \"2015-06-18T11:13:44.122Z\",\n  \"isprivate\": false,\n  \"ispersonal\": false\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/post/:post",    "title": "Remove a post.",    "name": "RemovePost",    "group": "ApiPosts",    "version": "1.0.0",    "description": "<p>Removes a post</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "post",            "description": "<p>the guid representation of the post</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Posts",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve posts.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"status\": \"removed\"\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a post guid</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a post guid.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/username/:username",    "title": "Get a specific user",    "name": "GetUser",    "group": "ApiUsers",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific user</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl -i http://localhost:3000/username/cliftonc",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "username",            "description": "<p>The name of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Users",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve users.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n  \"username\": \"cliftonc\",\n  \"altid\": \"1\",\n  \"userdata\": {\n    \"avatar\": \"test.jpg\"\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/user/:id",    "title": "Get a specific user by id",    "name": "GetUser",    "group": "ApiUsers",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific user by id</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl -i http://localhost:3000/user/cbeab41d-2372-4017-ac50-d8d63802d452",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>The id of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Users",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve users.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n  \"username\": \"cliftonc\",\n  \"altid\": \"1\",\n  \"userdata\": {\n    \"avatar\": \"test.jpg\"\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/useraltid/:id",    "title": "Get a specific user by altid",    "name": "GetUser",    "group": "ApiUsers",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific user by altid</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl -i http://localhost:3000/useraltid/1234",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "id",            "description": "<p>The alternate id of the user as a string</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Users",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve users.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n  \"username\": \"cliftonc\",\n  \"altid\": \"1\",\n  \"userdata\": {\n    \"avatar\": \"test.jpg\"\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/user/:id/relationship",    "title": "Get details of a relationship",    "name": "GetUserRelationship",    "group": "ApiUsers",    "version": "1.0.0",    "description": "<p>Retrieves details of a specific user relationship with the current logged in user, intended to be used when viewing someone elses profile.</p> ",    "examples": [      {        "title": "Example usage:",        "content": "curl -i http://localhost:3000/user/cbeab41d-2372-4017-ac50-d8d63802d452/relationship",        "type": "curl"      }    ],    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>The id of the user</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Users",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve users.</p> ",    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"isFriend\": true,\n  \"isFriendSince\": \"2015-06-18T11:13:43.437Z\",\n  \"isFriendRequestPending\": false,\n  \"isFriendRequestSince\": null,\n  \"youFollow\": false,\n  \"youFollowSince\": null,\n  \"youFollowPrivate\": false,\n  \"youFollowPersonal\": false,\n  \"theyFollow\": true,\n  \"theyFollowSince\": \"2015-06-18T11:13:43.768Z\",\n  \"theyFollowPrivate\": false,\n  \"theyFollowPersonal\": false,\n  \"inCommon\": []\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "NotFoundError",            "description": "<p>The user was not found.</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Not-Found:",          "content": "HTTP/1.1 404 Not Found\n{\n  'code': 'NotFoundError',\n  'message': 'Could not find that user.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/user/:user",    "title": "Update a user",    "name": "Users",    "group": "ApiUsers",    "version": "1.0.0",    "description": "<p>Updates a user.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "user",            "description": "<p>the guid or altid of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "username",            "description": "<p>the name of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "altid",            "description": "<p>the alternate ID of the user</p> "          },          {            "group": "Parameter",            "type": "<p>Object</p> ",            "optional": false,            "field": "userdata",            "description": "<p>arbitrary user data</p> "          }        ]      }    },    "filename": "./server/index.js",    "groupTitle": "Users",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve users.</p> ",    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a username</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a username.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    },    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"user\": \"ca280565-422c-4b49-ad48-54514e8a4bb8\",\n  \"username\": \"new_name\",\n  \"altid\": \"new_altid\",\n  \"userdata\": {\n    \"hello\": \"world\"\n  }\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/user",    "title": "Add a user",    "name": "Users",    "group": "ApiUsers",    "version": "1.0.0",    "description": "<p>Creates a new user.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "username",            "description": "<p>the name of the user</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "altid",            "description": "<p>the alternate ID of the user</p> "          },          {            "group": "Parameter",            "type": "<p>Object</p> ",            "optional": false,            "field": "userdata",            "description": "<p>arbitrary user data</p> "          },          {            "group": "Parameter",            "type": "<p>Object</p> ",            "optional": false,            "field": "initialise",            "description": "<p>initialisation command</p> "          }        ]      },      "examples": [        {          "title": "userdata",          "content": "{\n       avatar: '/image/1.jpg',\n       fullName: 'Clifton Cunningham'\n     }",          "type": "json"        },        {          "title": "initialise",          "content": "{\n       follow: {\n         users: ['bob', 'cliftonc'],\n         backfill: '1d',\n         isprivate: false,\n         ispersonal: true\n       }\n     }",          "type": "json"        }      ]    },    "examples": [      {        "title": "Example usage:",        "content": "curl --data 'username=cliftonc' http://localhost:3000/user",        "type": "curl"      }    ],    "filename": "./server/index.js",    "groupTitle": "Users",    "groupDescription": "<p>This is a collection of methods that allow you to create and retrieve users.</p> ",    "error": {      "fields": {        "4xx": [          {            "group": "4xx",            "optional": false,            "field": "BadRequestError",            "description": "<p>You did not provide a username</p> "          }        ],        "5xx": [          {            "group": "5xx",            "optional": false,            "field": "ServerError",            "description": "<p>There was a server problem.</p> "          }        ]      },      "examples": [        {          "title": "Bad-Request:",          "content": "HTTP/1.1 400 Bad Request\n{\n  'code': 'BadRequestError',\n  'message': 'You must provide a username.'\n}",          "type": "json"        },        {          "title": "Server-Error:",          "content": "HTTP/1.1 500 Server Error\n{\n  'code': 'NotFoundError',\n  'message': 'Something specific about the server error'\n}",          "type": "json"        }      ]    },    "success": {      "examples": [        {          "title": "HTTP1.1 200 Success",          "content": "HTTP1.1 200 Success\n{\n  \"user\": \"861a20da-0d39-4d42-9020-4b12a8a0b329\",\n  \"username\": \"cliftonc\",\n  \"altid\": \"1\",\n  \"userdata\": {\n    \"avatar\": \"test.jpg\"\n  }\n}",          "type": "json"        }      ]    }  },  {    "type": "table",    "url": "Follower",    "title": "Follower",    "name": "FollowerData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores follower data from one user to another, this is not necessarily reciprocal, and does not require approval.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "follow",            "description": "<p>The unique guid for the follower relationship.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_follower",            "description": "<p>The unique guid for the user they are following.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>Is the follow visible only to friends.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>Is the follow visible only for the user and the person being followed.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "since",            "description": "<p>The date the follow began.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Follow",        "content": "INSERT INTO seguir.followers (follow, user, user_follower, since) VALUES(?, ?, ?, ?);",        "type": "cql"      },      {        "title": "Select Follow",        "content": "SELECT follow, user, user_follower, since FROM seguir.followers WHERE follow = ?",        "type": "cql"      },      {        "title": "Select Followers",        "content": "SELECT user, user_follower, since from seguir.followers WHERE user = ?",        "type": "cql"      },      {        "title": "Remove Follow",        "content": "DELETE FROM {KEYSPACE}.followers WHERE follow = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Follower",    "title": "Follower",    "name": "FollowerData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores follower data from one user to another, this is not necessarily reciprocal, and does not require approval.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "follow",            "description": "<p>The unique guid for the follower relationship.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_follower",            "description": "<p>The unique guid for the user they are following.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>Is the follow visible only to friends.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>Is the follow visible only for the user and the person being followed.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "since",            "description": "<p>The date the follow began.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Follow",        "content": "INSERT INTO seguir.followers (follow, user, user_follower, since) VALUES(?, ?, ?, ?);",        "type": "cql"      },      {        "title": "Select Follow",        "content": "SELECT follow, user, user_follower, since FROM seguir.followers WHERE follow = ?",        "type": "cql"      },      {        "title": "Select Followers",        "content": "SELECT user, user_follower, since from seguir.followers WHERE user = ?",        "type": "cql"      },      {        "title": "Remove Follow",        "content": "DELETE FROM {KEYSPACE}.followers WHERE follow = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Friends",    "title": "Friends",    "name": "FriendData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores a reference to between each user and their friends, this is reciprocal so you get two rows per relationship.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "friend",            "description": "<p>The unique guid for the friend relationship.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_friend",            "description": "<p>The unique guid for the user they are friends with.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "since",            "description": "<p>The date the relationship began.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Friend",        "content": "INSERT INTO seguir.friends (friend, user, user_friend, since) VALUES(?, ?, ?, ?)",        "type": "cql"      },      {        "title": "Select Friend",        "content": "SELECT friend, user, user_friend, since FROM seguir.friends WHERE friend = ?",        "type": "cql"      },      {        "title": "Select Friends",        "content": "SELECT user_friend, since from seguir.friends WHERE user = ?",        "type": "cql"      },      {        "title": "Remove Friend",        "content": "DELETE FROM {KEYSPACE}.friends WHERE friend = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Friends",    "title": "Friends",    "name": "FriendData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores a reference to between each user and their friends, this is reciprocal so you get two rows per relationship.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "friend",            "description": "<p>The unique guid for the friend relationship.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_friend",            "description": "<p>The unique guid for the user they are friends with.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "since",            "description": "<p>The date the relationship began.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Friend",        "content": "INSERT INTO seguir.friends (friend, user, user_friend, since) VALUES(?, ?, ?, ?)",        "type": "cql"      },      {        "title": "Select Friend",        "content": "SELECT friend, user, user_friend, since FROM seguir.friends WHERE friend = ?",        "type": "cql"      },      {        "title": "Select Friends",        "content": "SELECT user_friend, since from seguir.friends WHERE user = ?",        "type": "cql"      },      {        "title": "Remove Friend",        "content": "DELETE FROM {KEYSPACE}.friends WHERE friend = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "FriendRequests",    "title": "Friend Requests",    "name": "FriendRequestData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores pending friend requests, stored in a separate table to simplify the relationship management and newsfeed.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "friend_request",            "description": "<p>The unique guid for the friend requyest.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_friend",            "description": "<p>The unique guid for the user they are friends with.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "message",            "description": "<p>The message to send with the request</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "time",            "description": "<p>The date the request was made.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Friend Request",        "content": "INSERT INTO seguir.friend_request (friend_request, user, user_friend, message, time) VALUES(?, ?, ?, ?)",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "FriendRequests",    "title": "Friend Requests",    "name": "FriendRequestData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores pending friend requests, stored in a separate table to simplify the relationship management and newsfeed.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "friend_request",            "description": "<p>The unique guid for the friend requyest.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user_friend",            "description": "<p>The unique guid for the user they are friends with.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "message",            "description": "<p>The message to send with the request</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "time",            "description": "<p>The date the request was made.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Friend Request",        "content": "INSERT INTO seguir.friend_request (friend_request, user, user_friend, message, time) VALUES(?, ?, ?, ?)",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Likes",    "title": "Likes",    "name": "LikesData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores items that a user 'likes' on their newsfeed, an item can be anything that is representable by a string (e.g. a canonical URL for a page is a typical example, but it can be anything);</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "like",            "description": "<p>The unique guid for the like.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "item",            "description": "<p>The key of the item liked by the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "since",            "description": "<p>The date the like was made.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Like",        "content": "INSERT INTO seguir.likes (like, user, item, since) VALUES(?, ?, ?, ?);",        "type": "cql"      },      {        "title": "Select Like",        "content": "SELECT like, item, user, since FROM seguir.likes WHERE like = ?",        "type": "cql"      },      {        "title": "Check Like",        "content": "SELECT like, user, since FROM seguir.likes WHERE user = ? AND item = ?",        "type": "cql"      },      {        "title": "Remove Like",        "content": "DELETE FROM {KEYSPACE}.likes WHERE like = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Likes",    "title": "Likes",    "name": "LikesData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores items that a user 'likes' on their newsfeed, an item can be anything that is representable by a string (e.g. a canonical URL for a page is a typical example, but it can be anything);</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "like",            "description": "<p>The unique guid for the like.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "item",            "description": "<p>The key of the item liked by the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "since",            "description": "<p>The date the like was made.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Like",        "content": "INSERT INTO seguir.likes (like, user, item, since) VALUES(?, ?, ?, ?);",        "type": "cql"      },      {        "title": "Select Like",        "content": "SELECT like, item, user, since FROM seguir.likes WHERE like = ?",        "type": "cql"      },      {        "title": "Check Like",        "content": "SELECT like, user, since FROM seguir.likes WHERE user = ? AND item = ?",        "type": "cql"      },      {        "title": "Remove Like",        "content": "DELETE FROM {KEYSPACE}.likes WHERE like = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Posts",    "title": "Posts",    "name": "PostsData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores posts that a user (or application) make to a users timeline.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "post",            "description": "<p>The unique guid for the post.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "type",            "description": "<p>Optional sub-type for the post, defaults to 'text'.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "content",            "description": "<p>The content of the post.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>Is the post only for friends.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>Is the post only for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "posted",            "description": "<p>The date the post was made.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Post",        "content": "INSERT INTO seguir.posts (post, user, content, posted) VALUES(?, ?, ?, ?)",        "type": "cql"      },      {        "title": "Select Post",        "content": "SELECT post, content, user, posted FROM seguir.posts WHERE post = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Posts",    "title": "Posts",    "name": "PostsData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores posts that a user (or application) make to a users timeline.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "post",            "description": "<p>The unique guid for the post.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "type",            "description": "<p>Optional sub-type for the post, defaults to 'varchar(500)'.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "content",            "description": "<p>The content of the post.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>Is the post only for friends.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>Is the post only for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Timestamp</p> ",            "optional": false,            "field": "posted",            "description": "<p>The date the post was made.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Post",        "content": "INSERT INTO seguir.posts (post, user, content, posted) VALUES(?, ?, ?, ?)",        "type": "cql"      },      {        "title": "Select Post",        "content": "SELECT post, content, user, posted FROM seguir.posts WHERE post = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Users",    "title": "Users",    "name": "UserData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores a reference to each user that can have posts, likes, friends and followers.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "username",            "description": "<p>The name of the user.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert User",        "content": "INSERT INTO seguir.users (user, username) VALUES(?, ?)",        "type": "cql"      },      {        "title": "Select User",        "content": "SELECT user, username FROM seguir.users WHERE user = ?",        "type": "cql"      },      {        "title": "Select User by Name",        "content": "SELECT user, username FROM seguir.users WHERE username = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Users",    "title": "Users",    "name": "UserData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Stores a reference to each user that can have posts, likes, friends and followers.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "username",            "description": "<p>The name of the user.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert User",        "content": "INSERT INTO seguir.users (user, username) VALUES(?, ?)",        "type": "cql"      },      {        "title": "Select User",        "content": "SELECT user, username FROM seguir.users WHERE user = ?",        "type": "cql"      },      {        "title": "Select User by Name",        "content": "SELECT user, username FROM seguir.users WHERE username = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Userline",    "title": "Newsfeed",    "name": "UserLineData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Contains the newsfeed for each user, updated by performing any of the Add actions, not interacted with directly.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "time",            "description": "<p>The unique timeuuid for the event, this is how the feed is sorted.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "item",            "description": "<p>The unique guid for the item in the feed - this can be a post, follow, friend or like event.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "type",            "description": "<p>The string short name for the type of event, valid values are: 'post','follow','friend','like'.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>Is this event private and only visible if the user is a friend.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>Is this event personal and only visible to the user.</p> "          }        ]      }    },    "filename": "./db/cassandra/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Feed Item",        "content": "INSERT INTO seguir.userline (user, item, type, time) VALUES(?, ?, ?, ?);",        "type": "cql"      },      {        "title": "Select Feed",        "content": "SELECT user, time, dateOf(time) AS date, item, type FROM seguir.userline WHERE user = ? {privateClause}{timeClause} LIMIT {limit}",        "type": "cql"      },      {        "title": "Remove Item from feed)",        "content": "DELETE FROM {KEYSPACE}.userline WHERE user = ? AND item = ?",        "type": "cql"      }    ]  },  {    "type": "table",    "url": "Userline",    "title": "Newsfeed",    "name": "UserLineData",    "group": "Data",    "version": "1.0.0",    "description": "<p>Contains the newsfeed for each user, updated by performing any of the Add actions, not interacted with directly.</p> ",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "user",            "description": "<p>The unique guid for the user.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "time",            "description": "<p>The unique timevarchar(36) for the event, this is how the feed is sorted.</p> "          },          {            "group": "Parameter",            "type": "<p>Guid</p> ",            "optional": false,            "field": "item",            "description": "<p>The unique guid for the item in the feed - this can be a post, follow, friend or like event.</p> "          },          {            "group": "Parameter",            "type": "<p>String</p> ",            "optional": false,            "field": "type",            "description": "<p>The string short name for the type of event, valid values are: 'post','follow','friend','like'.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "isprivate",            "description": "<p>Is this event private and only visible if the user is a friend.</p> "          },          {            "group": "Parameter",            "type": "<p>Boolean</p> ",            "optional": false,            "field": "ispersonal",            "description": "<p>Is this event personal and only visible to the user.</p> "          }        ]      }    },    "filename": "./db/postgres/setup/setupTenant.js",    "groupTitle": "Data Structure",    "groupDescription": "<p>This section defines the various table structures used to store the data in Cassandra, as we are using apidoc to generate this documentation, please read the 'parameters' reflects the columns in the tables.</p> ",    "examples": [      {        "title": "Insert Feed Item",        "content": "INSERT INTO seguir.userline (user, item, type, time) VALUES(?, ?, ?, ?);",        "type": "cql"      },      {        "title": "Select Feed",        "content": "SELECT user, time, dateOf(time) AS date, item, type FROM seguir.userline WHERE user = ? {privateClause}{timeClause} LIMIT {limit}",        "type": "cql"      },      {        "title": "Remove Item from feed)",        "content": "DELETE FROM {KEYSPACE}.userline WHERE user = ? AND item = ?",        "type": "cql"      }    ]  },  {    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "optional": false,            "field": "varname1",            "description": "<p>No type.</p> "          },          {            "group": "Success 200",            "type": "<p>String</p> ",            "optional": false,            "field": "varname2",            "description": "<p>With type.</p> "          }        ]      }    },    "type": "",    "url": "",    "version": "0.0.0",    "filename": "./doc/server/main.js",    "group": "_Users_gauravgajjar_git_seguir_doc_server_main_js",    "groupTitle": "_Users_gauravgajjar_git_seguir_doc_server_main_js",    "name": ""  }]